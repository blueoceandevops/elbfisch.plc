/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.jpac.plc.s7.symaddr.parser;

import org.jpac.plc.s7.symaddr.lexer.*;
import org.jpac.plc.s7.symaddr.node.*;
import org.jpac.plc.s7.symaddr.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AVarDatatype */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AStructDatatype */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AVar */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AStruct */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce ASingleVariablesDefinitionList */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AMultipleVariablesDefinitionList */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AVariablesTypeAssignment */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce AVariablesDefinition */
		    {
			ArrayList list = new7();
			push(goTo(5), list, false);
		    }
		    break;
                    case 8: /* reduce ASingleIdentifierList */
		    {
			ArrayList list = new8();
			push(goTo(6), list, false);
		    }
		    break;
                    case 9: /* reduce AMultipleIdentifierList */
		    {
			ArrayList list = new9();
			push(goTo(6), list, false);
		    }
		    break;
                    case 10: /* reduce AAsignednumber1Signednumber */
		    {
			ArrayList list = new10();
			push(goTo(7), list, false);
		    }
		    break;
                    case 11: /* reduce AAsignednumber2Signednumber */
		    {
			ArrayList list = new11();
			push(goTo(7), list, false);
		    }
		    break;
                    case 12: /* reduce AArraydim */
		    {
			ArrayList list = new12();
			push(goTo(8), list, false);
		    }
		    break;
                    case 13: /* reduce AAdditionalarraydim */
		    {
			ArrayList list = new13();
			push(goTo(9), list, false);
		    }
		    break;
                    case 14: /* reduce ASingleArraydimList */
		    {
			ArrayList list = new14();
			push(goTo(10), list, false);
		    }
		    break;
                    case 15: /* reduce AMultipleArraydimList */
		    {
			ArrayList list = new15();
			push(goTo(10), list, false);
		    }
		    break;
                    case 16: /* reduce AArraydecl */
		    {
			ArrayList list = new16();
			push(goTo(11), list, false);
		    }
		    break;
                    case 17: /* reduce AStringdecl */
		    {
			ArrayList list = new17();
			push(goTo(12), list, false);
		    }
		    break;
                    case 18: /* reduce ABoolType */
		    {
			ArrayList list = new18();
			push(goTo(13), list, false);
		    }
		    break;
                    case 19: /* reduce AByteType */
		    {
			ArrayList list = new19();
			push(goTo(13), list, false);
		    }
		    break;
                    case 20: /* reduce ACharType */
		    {
			ArrayList list = new20();
			push(goTo(13), list, false);
		    }
		    break;
                    case 21: /* reduce AWordType */
		    {
			ArrayList list = new21();
			push(goTo(13), list, false);
		    }
		    break;
                    case 22: /* reduce ADwordType */
		    {
			ArrayList list = new22();
			push(goTo(13), list, false);
		    }
		    break;
                    case 23: /* reduce AIntType */
		    {
			ArrayList list = new23();
			push(goTo(13), list, false);
		    }
		    break;
                    case 24: /* reduce ADintType */
		    {
			ArrayList list = new24();
			push(goTo(13), list, false);
		    }
		    break;
                    case 25: /* reduce ARealType */
		    {
			ArrayList list = new25();
			push(goTo(13), list, false);
		    }
		    break;
                    case 26: /* reduce AStringType */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce AUdtType */
		    {
			ArrayList list = new27();
			push(goTo(13), list, false);
		    }
		    break;
                    case 28: /* reduce AS5timeType */
		    {
			ArrayList list = new28();
			push(goTo(13), list, false);
		    }
		    break;
                    case 29: /* reduce ATimeType */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce ATimeofdayType */
		    {
			ArrayList list = new30();
			push(goTo(13), list, false);
		    }
		    break;
                    case 31: /* reduce ADateType */
		    {
			ArrayList list = new31();
			push(goTo(13), list, false);
		    }
		    break;
                    case 32: /* reduce ADateandtimeType */
		    {
			ArrayList list = new32();
			push(goTo(13), list, false);
		    }
		    break;
                    case 33: /* reduce AArrayType */
		    {
			ArrayList list = new33();
			push(goTo(13), list, false);
		    }
		    break;
                    case 34: /* reduce AStructType */
		    {
			ArrayList list = new34();
			push(goTo(13), list, false);
		    }
		    break;
                    case 35: /* reduce ATerminal$Sign */
		    {
			ArrayList list = new35();
			push(goTo(14), list, true);
		    }
		    break;
                    case 36: /* reduce ANonTerminal$Sign */
		    {
			ArrayList list = new36();
			push(goTo(14), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PDatatype node1 = (PDatatype) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AVarDatatype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDatatype pdatatypeNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pdatatypeNode1 = new AVarDatatype(pvarNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AStructDatatype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDatatype pdatatypeNode1;
        {
            // Block
        PStruct pstructNode2;
        TSemicolon tsemicolonNode3;
        pstructNode2 = (PStruct)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pdatatypeNode1 = new AStructDatatype(pstructNode2, tsemicolonNode3);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AVar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TVarsym tvarsymNode2;
        PVariablesDefinitionList pvariablesdefinitionlistNode3;
        tvarsymNode2 = (TVarsym)nodeArrayList1.get(0);
        pvariablesdefinitionlistNode3 = (PVariablesDefinitionList)nodeArrayList2.get(0);

        pvarNode1 = new AVar(tvarsymNode2, pvariablesdefinitionlistNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AStruct */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStruct pstructNode1;
        {
            // Block
        TStructsym tstructsymNode2;
        PVariablesDefinitionList pvariablesdefinitionlistNode3;
        TStructendsym tstructendsymNode4;
        tstructsymNode2 = (TStructsym)nodeArrayList1.get(0);
        pvariablesdefinitionlistNode3 = (PVariablesDefinitionList)nodeArrayList2.get(0);
        tstructendsymNode4 = (TStructendsym)nodeArrayList3.get(0);

        pstructNode1 = new AStruct(tstructsymNode2, pvariablesdefinitionlistNode3, tstructendsymNode4);
        }
	nodeList.add(pstructNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ASingleVariablesDefinitionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariablesDefinitionList pvariablesdefinitionlistNode1;
        {
            // Block
        PVariablesDefinition pvariablesdefinitionNode2;
        pvariablesdefinitionNode2 = (PVariablesDefinition)nodeArrayList1.get(0);

        pvariablesdefinitionlistNode1 = new ASingleVariablesDefinitionList(pvariablesdefinitionNode2);
        }
	nodeList.add(pvariablesdefinitionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AMultipleVariablesDefinitionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariablesDefinitionList pvariablesdefinitionlistNode1;
        {
            // Block
        PVariablesDefinitionList pvariablesdefinitionlistNode2;
        PVariablesDefinition pvariablesdefinitionNode3;
        pvariablesdefinitionlistNode2 = (PVariablesDefinitionList)nodeArrayList1.get(0);
        pvariablesdefinitionNode3 = (PVariablesDefinition)nodeArrayList2.get(0);

        pvariablesdefinitionlistNode1 = new AMultipleVariablesDefinitionList(pvariablesdefinitionlistNode2, pvariablesdefinitionNode3);
        }
	nodeList.add(pvariablesdefinitionlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AVariablesTypeAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariablesTypeAssignment pvariablestypeassignmentNode1;
        {
            // Block
        PIdentifierList pidentifierlistNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        pidentifierlistNode2 = (PIdentifierList)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pvariablestypeassignmentNode1 = new AVariablesTypeAssignment(pidentifierlistNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pvariablestypeassignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AVariablesDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariablesDefinition pvariablesdefinitionNode1;
        {
            // Block
        PVariablesTypeAssignment pvariablestypeassignmentNode2;
        TSemicolon tsemicolonNode3;
        pvariablestypeassignmentNode2 = (PVariablesTypeAssignment)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pvariablesdefinitionNode1 = new AVariablesDefinition(pvariablestypeassignmentNode2, tsemicolonNode3);
        }
	nodeList.add(pvariablesdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ASingleIdentifierList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdentifierList pidentifierlistNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pidentifierlistNode1 = new ASingleIdentifierList(tidentifierNode2);
        }
	nodeList.add(pidentifierlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AMultipleIdentifierList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdentifierList pidentifierlistNode1;
        {
            // Block
        PIdentifierList pidentifierlistNode2;
        TComma tcommaNode3;
        TIdentifier tidentifierNode4;
        pidentifierlistNode2 = (PIdentifierList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pidentifierlistNode1 = new AMultipleIdentifierList(pidentifierlistNode2, tcommaNode3, tidentifierNode4);
        }
	nodeList.add(pidentifierlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAsignednumber1Signednumber */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignednumber psignednumberNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        TNumber tnumberNode3;
        {
            // Block
        }
        tnumberNode3 = (TNumber)nodeArrayList1.get(0);

        psignednumberNode1 = new ASignednumber(listNode2, tnumberNode3);
        }
	nodeList.add(psignednumberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAsignednumber2Signednumber */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignednumber psignednumberNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        TNumber tnumberNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tnumberNode4 = (TNumber)nodeArrayList2.get(0);

        psignednumberNode1 = new ASignednumber(listNode3, tnumberNode4);
        }
	nodeList.add(psignednumberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AArraydim */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArraydim parraydimNode1;
        {
            // Block
        PSignednumber psignednumberNode2;
        TDotdot tdotdotNode3;
        PSignednumber psignednumberNode4;
        psignednumberNode2 = (PSignednumber)nodeArrayList1.get(0);
        tdotdotNode3 = (TDotdot)nodeArrayList2.get(0);
        psignednumberNode4 = (PSignednumber)nodeArrayList3.get(0);

        parraydimNode1 = new AArraydim(psignednumberNode2, tdotdotNode3, psignednumberNode4);
        }
	nodeList.add(parraydimNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAdditionalarraydim */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditionalarraydim padditionalarraydimNode1;
        {
            // Block
        TComma tcommaNode2;
        PArraydim parraydimNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        parraydimNode3 = (PArraydim)nodeArrayList2.get(0);

        padditionalarraydimNode1 = new AAdditionalarraydim(tcommaNode2, parraydimNode3);
        }
	nodeList.add(padditionalarraydimNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ASingleArraydimList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArraydimList parraydimlistNode1;
        {
            // Block
        PArraydim parraydimNode2;
        parraydimNode2 = (PArraydim)nodeArrayList1.get(0);

        parraydimlistNode1 = new ASingleArraydimList(parraydimNode2);
        }
	nodeList.add(parraydimlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMultipleArraydimList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArraydimList parraydimlistNode1;
        {
            // Block
        PArraydimList parraydimlistNode2;
        TComma tcommaNode3;
        PArraydim parraydimNode4;
        parraydimlistNode2 = (PArraydimList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        parraydimNode4 = (PArraydim)nodeArrayList3.get(0);

        parraydimlistNode1 = new AMultipleArraydimList(parraydimlistNode2, tcommaNode3, parraydimNode4);
        }
	nodeList.add(parraydimlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AArraydecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArraydecl parraydeclNode1;
        {
            // Block
        TArray tarrayNode2;
        TLSquarebracket tlsquarebracketNode3;
        PArraydimList parraydimlistNode4;
        TRSquarebracket trsquarebracketNode5;
        TOf tofNode6;
        PType ptypeNode7;
        tarrayNode2 = (TArray)nodeArrayList1.get(0);
        tlsquarebracketNode3 = (TLSquarebracket)nodeArrayList2.get(0);
        parraydimlistNode4 = (PArraydimList)nodeArrayList3.get(0);
        trsquarebracketNode5 = (TRSquarebracket)nodeArrayList4.get(0);
        tofNode6 = (TOf)nodeArrayList5.get(0);
        ptypeNode7 = (PType)nodeArrayList6.get(0);

        parraydeclNode1 = new AArraydecl(tarrayNode2, tlsquarebracketNode3, parraydimlistNode4, trsquarebracketNode5, tofNode6, ptypeNode7);
        }
	nodeList.add(parraydeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AStringdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStringdecl pstringdeclNode1;
        {
            // Block
        TString tstringNode2;
        TLSquarebracket tlsquarebracketNode3;
        TNumber tnumberNode4;
        TRSquarebracket trsquarebracketNode5;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlsquarebracketNode3 = (TLSquarebracket)nodeArrayList2.get(0);
        tnumberNode4 = (TNumber)nodeArrayList3.get(0);
        trsquarebracketNode5 = (TRSquarebracket)nodeArrayList4.get(0);

        pstringdeclNode1 = new AStringdecl(tstringNode2, tlsquarebracketNode3, tnumberNode4, trsquarebracketNode5);
        }
	nodeList.add(pstringdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AByteType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TByte tbyteNode2;
        tbyteNode2 = (TByte)nodeArrayList1.get(0);

        ptypeNode1 = new AByteType(tbyteNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ACharType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptypeNode1 = new ACharType(tcharNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AWordType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TWord twordNode2;
        twordNode2 = (TWord)nodeArrayList1.get(0);

        ptypeNode1 = new AWordType(twordNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ADwordType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TDword tdwordNode2;
        tdwordNode2 = (TDword)nodeArrayList1.get(0);

        ptypeNode1 = new ADwordType(tdwordNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ADintType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TDint tdintNode2;
        tdintNode2 = (TDint)nodeArrayList1.get(0);

        ptypeNode1 = new ADintType(tdintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptypeNode1 = new ARealType(trealNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PStringdecl pstringdeclNode2;
        pstringdeclNode2 = (PStringdecl)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(pstringdeclNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AUdtType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TUdt tudtNode2;
        TNumber tnumberNode3;
        tudtNode2 = (TUdt)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        ptypeNode1 = new AUdtType(tudtNode2, tnumberNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AS5timeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TS5time ts5timeNode2;
        ts5timeNode2 = (TS5time)nodeArrayList1.get(0);

        ptypeNode1 = new AS5timeType(ts5timeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ATimeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTime ttimeNode2;
        ttimeNode2 = (TTime)nodeArrayList1.get(0);

        ptypeNode1 = new ATimeType(ttimeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ATimeofdayType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TTimeofday ttimeofdayNode2;
        ttimeofdayNode2 = (TTimeofday)nodeArrayList1.get(0);

        ptypeNode1 = new ATimeofdayType(ttimeofdayNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ADateType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TDate tdateNode2;
        tdateNode2 = (TDate)nodeArrayList1.get(0);

        ptypeNode1 = new ADateType(tdateNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ADateandtimeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TDateandtime tdateandtimeNode2;
        tdateandtimeNode2 = (TDateandtime)nodeArrayList1.get(0);

        ptypeNode1 = new ADateandtimeType(tdateandtimeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AArrayType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PArraydecl parraydeclNode2;
        parraydeclNode2 = (PArraydecl)nodeArrayList1.get(0);

        ptypeNode1 = new AArrayType(parraydeclNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AStructType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PStruct pstructNode2;
        pstructNode2 = (PStruct)nodeArrayList1.get(0);

        ptypeNode1 = new AStructType(pstructNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ATerminal$Sign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TSign tsignNode1;
        tsignNode1 = (TSign)nodeArrayList1.get(0);
	if(tsignNode1 != null)
	{
	  listNode2.add(tsignNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ANonTerminal$Sign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TSign tsignNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tsignNode2 = (TSign)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tsignNode2 != null)
	{
	  listNode3.add(tsignNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, },
			{{-1, ERROR, 1}, {29, SHIFT, 6}, },
			{{-1, ERROR, 2}, {29, SHIFT, 6}, },
			{{-1, ERROR, 3}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 5}, {22, SHIFT, 12}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 7}, {1, SHIFT, 13}, {29, SHIFT, 6}, },
			{{-1, ERROR, 8}, {22, SHIFT, 15}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 10}, {20, SHIFT, 16}, {21, SHIFT, 17}, },
			{{-1, REDUCE, 2}, {29, SHIFT, 6}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 16}, {29, SHIFT, 18}, },
			{{-1, ERROR, 17}, {0, SHIFT, 1}, {3, SHIFT, 19}, {4, SHIFT, 20}, {5, SHIFT, 21}, {6, SHIFT, 22}, {7, SHIFT, 23}, {8, SHIFT, 24}, {9, SHIFT, 25}, {10, SHIFT, 26}, {11, SHIFT, 27}, {12, SHIFT, 28}, {13, SHIFT, 29}, {14, SHIFT, 30}, {15, SHIFT, 31}, {16, SHIFT, 32}, {17, SHIFT, 33}, {18, SHIFT, 34}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 27}, {27, SHIFT, 39}, },
			{{-1, ERROR, 28}, {31, SHIFT, 40}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 34}, {27, SHIFT, 41}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 39}, {31, SHIFT, 42}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 41}, {30, SHIFT, 43}, {31, SHIFT, 44}, },
			{{-1, ERROR, 42}, {28, SHIFT, 49}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 45}, {24, SHIFT, 50}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 47}, {20, SHIFT, 51}, {28, SHIFT, 52}, },
			{{-1, ERROR, 48}, {30, SHIFT, 53}, {31, SHIFT, 54}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 50}, {30, SHIFT, 43}, {31, SHIFT, 44}, },
			{{-1, ERROR, 51}, {30, SHIFT, 43}, {31, SHIFT, 44}, },
			{{-1, ERROR, 52}, {19, SHIFT, 57}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 57}, {0, SHIFT, 1}, {3, SHIFT, 19}, {4, SHIFT, 20}, {5, SHIFT, 21}, {6, SHIFT, 22}, {7, SHIFT, 23}, {8, SHIFT, 24}, {9, SHIFT, 25}, {10, SHIFT, 26}, {11, SHIFT, 27}, {12, SHIFT, 28}, {13, SHIFT, 29}, {14, SHIFT, 30}, {15, SHIFT, 31}, {16, SHIFT, 32}, {17, SHIFT, 33}, {18, SHIFT, 34}, },
			{{-1, REDUCE, 16}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, },
			{{-1, 35}, {0, 5}, },
			{{-1, 7}, {2, 11}, },
			{{-1, 8}, },
			{{-1, 9}, {7, 14}, {11, 14}, },
			{{-1, 10}, },
			{{-1, 45}, {50, 55}, },
			{{-1, 46}, {51, 56}, },
			{{-1, -1}, },
			{{-1, 47}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, {57, 58}, },
			{{-1, 48}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: structsym, varsym",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: ',', ':'",
			"expecting: structendsym, identifier",
			"expecting: structendsym, identifier, EOF",
			"expecting: identifier, EOF",
			"expecting: structsym, bool, byte, char, word, dword, int, dint, real, string, udt, s5time, time, timeofday, date, dateandtime, array",
			"expecting: '['",
			"expecting: number",
			"expecting: sign, number",
			"expecting: ']'",
			"expecting: ',', '..', ']'",
			"expecting: '..'",
			"expecting: ',', ']'",
			"expecting: of",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 2, 3, 4, 5, 3, 6, 4, 7, 2, 3, 6, 6, 1, 8, 4, 3, 3, 3, 3, 3, 3, 3, 3, 9, 10, 3, 3, 3, 3, 3, 9, 3, 3, 3, 3, 10, 3, 11, 12, 11, 13, 14, 15, 15, 11, 3, 11, 11, 16, 11, 13, 15, 15, 8, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
