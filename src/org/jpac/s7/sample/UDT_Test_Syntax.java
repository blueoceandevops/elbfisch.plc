/**
* PROJECT   : jpac sample project
* MODULE    : UDT_Test_Syntax.java 
* VERSION   : $Revision$
* DATE      : $Date$
* PURPOSE   : implements the S7 data item UDT_Test_Syntax
* REMARKS   : this code was automatically generated by the struct generator
*             of the jPAC S7 communication library
* LOG       : $Log$
*
* The jPac S7 communication library is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* The jPac S7 communication library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with the jPac S7 communication library. If not, see <http://www.gnu.org/licenses/>.
*
*/

package org.jpac.s7.sample;

import org.jpac.IndexOutOfRangeException;
import org.jpac.plc.AddressException;
import org.jpac.plc.Connection;
import org.jpac.plc.Address;
import org.jpac.plc.Data;
import org.jpac.plc.LobRxTx;
import org.jpac.plc.WordRxTx;
import org.jpac.plc.BitRxTx;
import org.jpac.plc.ByteRxTx;
import org.jpac.plc.DwordRxTx;
import org.jpac.plc.IntRxTx;
import org.jpac.plc.DintRxTx;
import org.jpac.plc.StringRxTx;

public class UDT_Test_Syntax extends LobRxTx{

    private BitRxTx 		bool10;
    private IntRxTx 		intvar1;
    private IntRxTx 		intvar2;
    private StringRxTx 		str;
    private StringRxTx 		str1;
    private BitRxTx 		bool11;
    private BitRxTx 		bool12;
    private BitRxTx 		bool13;
    private BitRxTx 		Bool101;
    private BitRxTx 		Bool102;
    private BitRxTx 		Bool103;
    private IntRxTx 		intvar3;
    private IntRxTx 		intvar4;
    private DintRxTx 		dint1;
    private DintRxTx 		dint2;
    private DintRxTx 		dint3;
    private WordRxTx 		Word1;
    private DwordRxTx 		dword1;
    private ByteRxTx 		char1;
     //not supported yet:    time1;
     //not supported yet:    time2;
     //not supported yet:    real1;
     //not supported yet:    t_o_d;
     //not supported yet:    dat;
     //not supported yet:    _date;
    private ByteRxTx 		byte1;
    private ByteRxTx 		byte2;
    private ByteRxTx 		byte3;
    private ByteRxTx 		byte5;
    private ByteRxTx[] 		byte10;
    private BitRxTx[][] 		bool200;
    private BitRxTx[] 		bool300;
    private UDT5$0 		aStruct;
    private IntRxTx[][][] 		intarra;
    private DintRxTx[][][][] 		dintarra;
    private UDT_Test_3Bits[] 		udt_2002;

    //constructor for standalone use
    public UDT_Test_Syntax(Connection conn, Address address) throws IndexOutOfRangeException{
        super(conn, address, 0, null);
        setData(conn.generateDataObject(getSize()));
    }

    //constructor for use inside a structure
    public UDT_Test_Syntax(Connection conn, Address address, int dataOffset, Data data) throws IndexOutOfRangeException{
        super(conn, address, dataOffset, data);
    }

    protected void assertIndexRange(int IndexNumber, int setFirstIndex, int setLastIndex, int actualIndex) throws IndexOutOfRangeException{
        if (actualIndex < setFirstIndex || actualIndex > setLastIndex)
            throw new IndexOutOfRangeException("expecting [" + setFirstIndex + ".." + setLastIndex + "] for index" + IndexNumber + ", found: " + actualIndex);
    }

    public static int getSize(){
        return 5452;
    }


    @SuppressWarnings("empty-statement")
    public BitRxTx getBool10() throws AddressException, IndexOutOfRangeException{
        if (bool10 == null){
            int byteOffset = getAddress().getByteIndex() + 0;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(0);
            addr.setSize(BitRxTx.getSize());
            bool10 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return bool10;
    }

    @SuppressWarnings("empty-statement")
    public IntRxTx getIntvar1() throws AddressException, IndexOutOfRangeException{
        if (intvar1 == null){
            int byteOffset = getAddress().getByteIndex() + 2;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(IntRxTx.getSize());
            intvar1 = new IntRxTx(getConnection(), addr, byteOffset, getData());
        }
        return intvar1;
    }

    @SuppressWarnings("empty-statement")
    public IntRxTx getIntvar2() throws AddressException, IndexOutOfRangeException{
        if (intvar2 == null){
            int byteOffset = getAddress().getByteIndex() + 4;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(IntRxTx.getSize());
            intvar2 = new IntRxTx(getConnection(), addr, byteOffset, getData());
        }
        return intvar2;
    }

    @SuppressWarnings("empty-statement")
    public StringRxTx getStr() throws AddressException, IndexOutOfRangeException{
        if (str == null){
            int byteOffset = getAddress().getByteIndex() + 6;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(14);
            str = new StringRxTx(getConnection(), addr, byteOffset, getData());
        }
        return str;
    }

    @SuppressWarnings("empty-statement")
    public StringRxTx getStr1() throws AddressException, IndexOutOfRangeException{
        if (str1 == null){
            int byteOffset = getAddress().getByteIndex() + 20;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(5);
            str1 = new StringRxTx(getConnection(), addr, byteOffset, getData());
        }
        return str1;
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool11() throws AddressException, IndexOutOfRangeException{
        if (bool11 == null){
            int byteOffset = getAddress().getByteIndex() + 25;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(0);
            addr.setSize(BitRxTx.getSize());
            bool11 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return bool11;
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool12() throws AddressException, IndexOutOfRangeException{
        if (bool12 == null){
            int byteOffset = getAddress().getByteIndex() + 25;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(1);
            addr.setSize(BitRxTx.getSize());
            bool12 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return bool12;
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool13() throws AddressException, IndexOutOfRangeException{
        if (bool13 == null){
            int byteOffset = getAddress().getByteIndex() + 25;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(2);
            addr.setSize(BitRxTx.getSize());
            bool13 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return bool13;
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool101() throws AddressException, IndexOutOfRangeException{
        if (Bool101 == null){
            int byteOffset = getAddress().getByteIndex() + 25;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(3);
            addr.setSize(BitRxTx.getSize());
            Bool101 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return Bool101;
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool102() throws AddressException, IndexOutOfRangeException{
        if (Bool102 == null){
            int byteOffset = getAddress().getByteIndex() + 25;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(4);
            addr.setSize(BitRxTx.getSize());
            Bool102 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return Bool102;
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool103() throws AddressException, IndexOutOfRangeException{
        if (Bool103 == null){
            int byteOffset = getAddress().getByteIndex() + 25;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex(5);
            addr.setSize(BitRxTx.getSize());
            Bool103 = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return Bool103;
    }

    @SuppressWarnings("empty-statement")
    public IntRxTx getIntvar3() throws AddressException, IndexOutOfRangeException{
        if (intvar3 == null){
            int byteOffset = getAddress().getByteIndex() + 26;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(IntRxTx.getSize());
            intvar3 = new IntRxTx(getConnection(), addr, byteOffset, getData());
        }
        return intvar3;
    }

    @SuppressWarnings("empty-statement")
    public IntRxTx getIntvar4() throws AddressException, IndexOutOfRangeException{
        if (intvar4 == null){
            int byteOffset = getAddress().getByteIndex() + 28;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(IntRxTx.getSize());
            intvar4 = new IntRxTx(getConnection(), addr, byteOffset, getData());
        }
        return intvar4;
    }

    @SuppressWarnings("empty-statement")
    public DintRxTx getDint1() throws AddressException, IndexOutOfRangeException{
        if (dint1 == null){
            int byteOffset = getAddress().getByteIndex() + 30;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(DintRxTx.getSize());
            dint1 = new DintRxTx(getConnection(), addr, byteOffset, getData());
        }
        return dint1;
    }

    @SuppressWarnings("empty-statement")
    public DintRxTx getDint2() throws AddressException, IndexOutOfRangeException{
        if (dint2 == null){
            int byteOffset = getAddress().getByteIndex() + 34;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(DintRxTx.getSize());
            dint2 = new DintRxTx(getConnection(), addr, byteOffset, getData());
        }
        return dint2;
    }

    @SuppressWarnings("empty-statement")
    public DintRxTx getDint3() throws AddressException, IndexOutOfRangeException{
        if (dint3 == null){
            int byteOffset = getAddress().getByteIndex() + 38;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(DintRxTx.getSize());
            dint3 = new DintRxTx(getConnection(), addr, byteOffset, getData());
        }
        return dint3;
    }

    @SuppressWarnings("empty-statement")
    public WordRxTx getWord1() throws AddressException, IndexOutOfRangeException{
        if (Word1 == null){
            int byteOffset = getAddress().getByteIndex() + 42;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(WordRxTx.getSize());
            Word1 = new WordRxTx(getConnection(), addr, byteOffset, getData());
        }
        return Word1;
    }

    @SuppressWarnings("empty-statement")
    public DwordRxTx getDword1() throws AddressException, IndexOutOfRangeException{
        if (dword1 == null){
            int byteOffset = getAddress().getByteIndex() + 44;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(DwordRxTx.getSize());
            dword1 = new DwordRxTx(getConnection(), addr, byteOffset, getData());
        }
        return dword1;
    }

    @SuppressWarnings("empty-statement")
    public ByteRxTx getChar1() throws AddressException, IndexOutOfRangeException{
        if (char1 == null){
            int byteOffset = getAddress().getByteIndex() + 48;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(ByteRxTx.getSize());
            char1 = new ByteRxTx(getConnection(), addr, byteOffset, getData());
        }
        return char1;
    }
     //not supported yet    time1;
     //not supported yet    time2;
     //not supported yet    real1;
     //not supported yet    t_o_d;
     //not supported yet    dat;
     //not supported yet    _date;

    @SuppressWarnings("empty-statement")
    public ByteRxTx getByte1() throws AddressException, IndexOutOfRangeException{
        if (byte1 == null){
            int byteOffset = getAddress().getByteIndex() + 74;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(ByteRxTx.getSize());
            byte1 = new ByteRxTx(getConnection(), addr, byteOffset, getData());
        }
        return byte1;
    }

    @SuppressWarnings("empty-statement")
    public ByteRxTx getByte2() throws AddressException, IndexOutOfRangeException{
        if (byte2 == null){
            int byteOffset = getAddress().getByteIndex() + 75;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(ByteRxTx.getSize());
            byte2 = new ByteRxTx(getConnection(), addr, byteOffset, getData());
        }
        return byte2;
    }

    @SuppressWarnings("empty-statement")
    public ByteRxTx getByte3() throws AddressException, IndexOutOfRangeException{
        if (byte3 == null){
            int byteOffset = getAddress().getByteIndex() + 76;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(ByteRxTx.getSize());
            byte3 = new ByteRxTx(getConnection(), addr, byteOffset, getData());
        }
        return byte3;
    }

    @SuppressWarnings("empty-statement")
    public ByteRxTx getByte5() throws AddressException, IndexOutOfRangeException{
        if (byte5 == null){
            int byteOffset = getAddress().getByteIndex() + 77;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(ByteRxTx.getSize());
            byte5 = new ByteRxTx(getConnection(), addr, byteOffset, getData());
        }
        return byte5;
    }

    @SuppressWarnings("empty-statement")
    public ByteRxTx getByte10(int index1) throws AddressException, IndexOutOfRangeException{

        assertIndexRange(1, -5, 3, index1);

        if (byte10 == null){
            byte10 = new ByteRxTx[9];
        }
        //check, if the item already has been accessed
        if (byte10[index1 - -5] == null){
            //if not, instantiate a new representation
            //and store it for subsequent uses
            int byteOffset = getAddress().getByteIndex() + 78 + ((index1 - -5)) * 1;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(ByteRxTx.getSize());
            byte10[index1 - -5] = new ByteRxTx(getConnection(), addr, byteOffset, getData());
        }
        return byte10[index1 - -5];
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool200(int index1 ,int index2) throws AddressException, IndexOutOfRangeException{

        assertIndexRange(1, 1, 256, index1);
        assertIndexRange(2, -4, 6, index2);

        if (bool200 == null){
            bool200 = new BitRxTx[256][11];
        }
        //check, if the item already has been accessed
        if (bool200[index1 - 1][index2 - -4] == null){
            //if not, instantiate a new representation
            //and store it for subsequent uses
            int dimSize2 = 2;
            int byteOffset = getAddress().getByteIndex() + 88 + (index1 - 1)*dimSize2 + (index2 - -4) / 8;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex((index2 - -4) % 8);
            addr.setSize(BitRxTx.getSize());
            bool200[index1 - 1][index2 - -4] = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return bool200[index1 - 1][index2 - -4];
    }

    @SuppressWarnings("empty-statement")
    public BitRxTx getBool300(int index1) throws AddressException, IndexOutOfRangeException{

        assertIndexRange(1, 1, 256, index1);

        if (bool300 == null){
            bool300 = new BitRxTx[256];
        }
        //check, if the item already has been accessed
        if (bool300[index1 - 1] == null){
            //if not, instantiate a new representation
            //and store it for subsequent uses
            int byteOffset = getAddress().getByteIndex() + 600 + (index1 - 1) / 8 ;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setBitIndex((index1 - 1) % 8);
            addr.setSize(BitRxTx.getSize());
            bool300[index1 - 1] = new BitRxTx(getConnection(), addr, byteOffset, getData());
        }
        return bool300[index1 - 1];
    }

    @SuppressWarnings("empty-statement")
    public UDT5$0 getAStruct() throws AddressException, IndexOutOfRangeException{
        if (aStruct == null){
            int byteOffset = getAddress().getByteIndex() + 632;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(UDT5$0.getSize());
            aStruct = new UDT5$0(getConnection(), addr, byteOffset, getData());
        }
        return aStruct;
    }

    @SuppressWarnings("empty-statement")
    public IntRxTx getIntarra(int index1 ,int index2 ,int index3) throws AddressException, IndexOutOfRangeException{

        assertIndexRange(1, 0, 10, index1);
        assertIndexRange(2, 0, 9, index2);
        assertIndexRange(3, -1, 6, index3);

        if (intarra == null){
            intarra = new IntRxTx[11][10][8];
        }
        //check, if the item already has been accessed
        if (intarra[index1 - 0][index2 - 0][index3 - -1] == null){
            //if not, instantiate a new representation
            //and store it for subsequent uses
            int dimSize3 = 8;
            int dimSize2 = dimSize3 * 10;
            int byteOffset = getAddress().getByteIndex() + 648 + ((index1 - 0)*dimSize2 + (index2 - 0)*dimSize3 + (index3 - -1)) * 2;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(IntRxTx.getSize());
            intarra[index1 - 0][index2 - 0][index3 - -1] = new IntRxTx(getConnection(), addr, byteOffset, getData());
        }
        return intarra[index1 - 0][index2 - 0][index3 - -1];
    }

    @SuppressWarnings("empty-statement")
    public DintRxTx getDintarra(int index1 ,int index2 ,int index3 ,int index4) throws AddressException, IndexOutOfRangeException{

        assertIndexRange(1, 0, 5, index1);
        assertIndexRange(2, 1, 3, index2);
        assertIndexRange(3, 1, 6, index3);
        assertIndexRange(4, 1, 7, index4);

        if (dintarra == null){
            dintarra = new DintRxTx[6][3][6][7];
        }
        //check, if the item already has been accessed
        if (dintarra[index1 - 0][index2 - 1][index3 - 1][index4 - 1] == null){
            //if not, instantiate a new representation
            //and store it for subsequent uses
            int dimSize4 = 7;
            int dimSize3 = dimSize4 * 6;
            int dimSize2 = dimSize3 * 3;
            int byteOffset = getAddress().getByteIndex() + 2408 + ((index1 - 0)*dimSize2 + (index2 - 1)*dimSize3 + (index3 - 1)*dimSize4 + (index4 - 1)) * 4;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(DintRxTx.getSize());
            dintarra[index1 - 0][index2 - 1][index3 - 1][index4 - 1] = new DintRxTx(getConnection(), addr, byteOffset, getData());
        }
        return dintarra[index1 - 0][index2 - 1][index3 - 1][index4 - 1];
    }

    @SuppressWarnings("empty-statement")
    public UDT_Test_3Bits getUdt_2002(int index1) throws AddressException, IndexOutOfRangeException{

        assertIndexRange(1, 1, 10, index1);

        if (udt_2002 == null){
            udt_2002 = new UDT_Test_3Bits[10];
        }
        //check, if the item already has been accessed
        if (udt_2002[index1 - 1] == null){
            //if not, instantiate a new representation
            //and store it for subsequent uses
            int byteOffset = getAddress().getByteIndex() + 5432 + ((index1 - 1)) * 2;
            Address addr = null;
            try{addr = (Address)getAddress().clone();}catch(CloneNotSupportedException exc){};
            addr.setByteIndex(byteOffset);
            addr.setSize(UDT_Test_3Bits.getSize());
            udt_2002[index1 - 1] = new UDT_Test_3Bits(getConnection(), addr, byteOffset, getData());
        }
        return udt_2002[index1 - 1];
    }
}
